# coding=utf-8
"""DuckDuckGo Web Browsing feature tests."""
"""
This module contains step definitions for web.feature.
It uses Selenium WebDriver for browser interactions:
https://www.seleniumhq.org/projects/webdriver/
Setup and cleanup are handled using hooks.
For a real test automation project,
use Page Object Model or Screenplay Pattern to model web interactions.
"""

import pytest

from pytest_bdd import scenarios, given, when, then, parsers
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

# Constants

DUCKDUCKGO_HOME = 'https://duckduckgo.com/'

# Scenarios

scenarios('../features/web.feature')

# Fixtures

@pytest.fixture
def browser():
    b = webdriver.Firefox()
    b.implicitly_wait(10)
    yield b
    b.quit()



#@scenario('features/web.feature', 'Basic DuckDuckGo Search')
#def test_basic_duckduckgo_search():
#    """Basic DuckDuckGo Search."""


#@scenario('features/web.feature', 'Lengthy DuckDuckGo Search')
#def test_lengthy_duckduckgo_search():
#    """Lengthy DuckDuckGo Search."""

# Given Steps

@given('the DuckDuckGo home page is displayed')
def the_duckduckgo_home_page_is_displayed(browser):
    """the DuckDuckGo home page is displayed."""
    raise NotImplementedError

# When Steps

@when(parsers.parse('the user searches for "{phrase}"'))
def the_user_searches_for_phrase(browser, phrase):
    """the user searches for "{phrase}"."""
    raise NotImplementedError


@when(parsers.parse('the user searches for the phrase:\n"""{text}"""'))
def search_long_phrase(browser, text):
    """the user searches for the phrase:
When in the Course of human events, it becomes necessary for one people
 to dissolve the political bands which have connected them with another,
 and to assume among the powers of the earth, the separate and equal
 station to which the Laws of Nature and of Nature's God entitle them,
 a decent respect to the opinions of mankind requires that they should
 declare the causes which impel them to the separation.."""
    raise NotImplementedError

# Then Steps

@then(parsers.parse('one of the results contains "{phrase}"'))
def one_of_the_results_contains_declaration_of_independence(browser, phrase):
    """one of the results contains "Declaration of Independence"."""
    raise NotImplementedError


@then(parsers.parse('results are shown for "{phrase}"'))
def results_are_shown_for_panda(browser, phrase):
    """results are shown for "{phrase}"."""
    raise NotImplementedError
